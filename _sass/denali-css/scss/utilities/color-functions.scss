@charset "utf-8";
// Copyright 2019, Oath Inc.
// Licensed under the terms of the MIT license. See LICENSE file in project root for terms.


@function denali-color($color-name, $color-variant: "500") {
    $color: false;
    @if $color-name == "brand" {
        //@warn "BRAND => #{$color-name} #{$color-variant}";
        $color: map-get($denali-brand-colors, $color-variant);
    } @else if $color-name == "grey" {
        //@warn "GRAPH => #{$color-name} #{$color-variant}";
        $color: map-get($denali-grey-colors, $color-variant);
    } @else if $color-name == "status" {
        //@warn "GRAPH => #{$color-name} #{$color-variant}";
        $color: map-get($denali-status-colors, $color-variant);
    } @else if $color-name == "graph" {
        //@warn "GRAPH => #{$color-name} #{$color-variant}";
        $color: map-get($denali-graph-colors, $color-variant);
    } @else {
        //@warn "DEFAULT => #{$color-name} #{$color-variant}";
        $color: map-get(map-get($denali-colors, $color-name), $color-variant);
    }
    @if $color {
        @return $color;
    } @else {
        // Libsass still doesn't seem to support @error
        @warn "=> ERROR: COLOR NOT FOUND! <= | Your $color-name, $color-variant combination did not match any of the values in the denali-color maps.";
    }
}

// same as above, but converts hex to HSL color
@function denali-color-hsl($color-name, $color-variant: "500") {
    $color: false;
    @if $color-name == "brand" {
        $color: map-get($denali-brand-colors, $color-variant);
    } @else if $color-name == "grey" {
        //@warn "GRAPH => #{$color-name} #{$color-variant}";
        $color: map-get($denali-grey-colors, $color-variant);
    } @else if $color-name == "status" {
        //@warn "GRAPH => #{$color-name} #{$color-variant}";
        $color: map-get($denali-status-colors, $color-variant);
    } @else if $color-name == "graph" {
        $color: map-get($denali-graph-colors, $color-variant);
    } @else {
        $color: map-get(map-get($denali-colors, $color-name), $color-variant);
    }
    @if $color {
        //$color-red: hue($color);
        $color-rgba: rgba($color, 1);
        $color-hue: hue($color-rgba);
        $color-saturation: saturation($color-rgba);
        $color-lightness: lightness($color-rgba);
        $color-hsl: hsl($color-hue, $color-saturation, $color-lightness);
        //@warn "=> DEBUG <= #{$color-name} | #{$color-variant} | #{$color-hsl}";
        @return $color-hsl;
    } @else {
        // Libsass still doesn't seem to support @error
        @warn "=> ERROR: HSL COLOR NOT FOUND! <= | Your $color-name, $color-variant combination did not match any of the values in the denali-color maps.";
    }
}


// Numbers

@function round-to-even-number($number) {
    @return floor($number / 2) * 2;
}

@function power-number($number, $exp) {
    $value: 1;
    @if $exp > 0 {
         @for $i from 1 through $exp {
            $value: $value * $number;
        }
    } @else if $exp < 0 {
         @for $i from 1 through -$exp {
            $value: $value / $number;
        }
    }
    @return $value;
}

// Color

@function color-luminance($color) {
    $color-rgb: ('red': red($color),'green': green($color),'blue': blue($color));
    @each $name, $value in $color-rgb {
        $adjusted: 0;
        $value: $value / 255;
        @if $value < .03928 {
            $value: $value / 12.92;
        } @else {
            $value: ($value + .055) / 1.055;
            $value: power-number($value, 2);
        }
        $color-rgb: map-merge($color-rgb, ($name: $value));
    }
    @return (map-get($color-rgb, 'red') * .2126) + (map-get($color-rgb, 'green') * .7152) + (map-get($color-rgb, 'blue') * .0722);
}

@function find-color-invert($color) {
     @if (color-luminance($color) > .55){
        @return rgba(#000, .7);
    } @else {
         @return #fff;
    }
}
